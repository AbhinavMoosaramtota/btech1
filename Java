// Write a program to calculate percentage of a given student. 3 subjects must be taken as an input from keyboard
class Percentage {
    public static void main(String[] args) {
int a=55;
int b=59;
int c=90;
int percentage=(a+b+c)/30;
        System.out.println(percentage);
    }
}

//Write a program to find sum of three numbers
class Sum {
    public static void main(String[] args) {
int a=5;
int b=5;
int c=5;
int sum=a+b+c;
        System.out.println("Sum of three numbers = "+sum);
    }
}

//Greet someone
import java.util.*;
class Greeting {
    public static void main(String[] args) {
System.out.println("What is your name ");
Scanner sc=new Scanner(System.in);
String name=sc.next();
        System.out.println("Hello " + name + " have a good day");
    }
}

//Write a program to check wether the number given by the user is integer value or not
import java.util.*;
class integer{
public static void main(String args[]){
System.out.println ("Enter a Number");
Scanner sc=new Scanner(System.in);
System.out.println (sc.hasNextInt()); 
}
}

// string uppercase lowercase code
class string {
    public static void main(String[] args) {
       String name=("Abhi");
       String lowercase=name.toLowerCase();
       System.out.println(lowercase);
       String uppercase=name.toUpperCase();
       System.out.println(uppercase);
    }
}

//replacing
import java.io.*;
class Replace{
public static void main(String args[]){
String letter="Dear <|name|> Thanks a lot";
letter=letter.replace("<|name|>","Abhi");
System.out.println(letter);
}
}

//OBJECT CALLING
public class Car {
    int model = 1992;
        String name = "HAYABUSA";
        
    public static void main(String[] args) {
            Car mycar = new Car();
            System.out.println(mycar.model);
            System.out.println(mycar.name);
}
}

//ARRAY LIST
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) {
			
		// ArrayList = 	a resizable array. 
		//				Elements can be added and removed after compilation phase
		//				store reference data types
		
		ArrayList<String> food = new ArrayList<String>();
		
		food.add("pizza");
		food.add("hamburger");
		food.add("hotdog");
		
		//food.set(0, "sushi");
		//food.remove(2);
		//food.clear();
		
		for(int i=0; i<food.size(); i++) {
			System.out.println(food.get(i));
		}
	}
}

//2D ARRAY LISTS
import java.util.*;
public class Main {
	public static void main(String[] args) {
	
		ArrayList<ArrayList<String>> groceryList = new ArrayList();
		
		ArrayList<String> bakeryList = new ArrayList();
		bakeryList.add("pasta");
		bakeryList.add("garlic bread");
		bakeryList.add("donuts");
		
		ArrayList<String> produceList = new ArrayList();
		produceList.add("tomatoes");
		produceList.add("zucchini");
		produceList.add("peppers");
		
		ArrayList<String> drinksList = new ArrayList();
		drinksList.add("soda");
		drinksList.add("coffee");
		
		groceryList.add(bakeryList);
		groceryList.add(produceList);
		groceryList.add(drinksList);
		
		System.out.println(groceryList);
		
	}
}

// FOR-EACH LOOP WITH AND WITHOUT USING ARRAYLIST
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) {
			
		// for-each = 	traversing technique to iterate through the elements in an array/collection
		//				less steps, more readable
		//				less flexible
		
		//String[] animals = {"cat","dog","rat","bird"};
		ArrayList<String> animals = new ArrayList<String>();
		
		animals.add("cat");
		animals.add("dog");
		animals.add("rat");
		animals.add("bird");
		
		for(String i : animals) {
			System.out.println(i);
		}
	}
}

//METHODS
public class Main {
	public static void main(String[] args) {
		// method = a block of code that is executed whenever it is called upon
		int x = 3;
		int y = 4;
		int z = add(x,y);
		System.out.println(z);
	}
	static int add(int x, int y) {	
		int z = x + y;
		return z;
	}
}
// in the above code add is a method we can pass in arguments but you need to have a matching set of parameters(int x, int y)
//in your method. methods is nothing but function in c. they are executed whenever they are called upon.

//OVERLOADING METHODS
public class Main {

	public static void main(String[] args) {
		
		// overloaded methods = methods that share the same name but have different parameters
		//						method name + parameters = method signature
		
		double x = add(1.0,2.0,3.0,4.0);
		
		System.out.println(x);
		
	}
	
	static int add(int a, int b) {
		System.out.println("This is overloaded method #1");
		return a + b;
	}
	static int add(int a, int b, int c) {
		System.out.println("This is overloaded method #2");
		return a + b + c;
	}
	static int add(int a, int b, int c, int d) {
		System.out.println("This is overloaded method #3");
		return a + b + c + d;
	}
	static double add(double a, double b) {
		System.out.println("This is overloaded method #4");
		return a + b;
	}
	static double add(double a, double b, double c) {
		System.out.println("This is overloaded method #5");
		return a + b + c;
	}
	static double add(double a, double b, double c, double d) {
		System.out.println("This is overloaded method #6");
		return a + b + c + d;
	}	
}
// in method overloading we can have all same method names but need to have different parameters like changing the number
of parameters or changing of the data type in the in the parameters this gives a unique method signature.

//CONSTRUCTOR
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Human human1 = new Human("Rick", 65, 70);
        Human human2 = new Human("Morty", 16, 50);
        human1.drink();
        human2.eat();
    }
}
class Human {
    private String name;
    private int age;
    private double weight;
    public Human(String name, int age, double weight) {
        this.name = name;
        this.age = age;
        this.weight = weight;
    }
    public String getName() {
        return name;
    }
    public int getAge() {
        return age;
    }
    public double getWeight() {
        return weight;
    }
    public void eat() {
        System.out.println(name + " is eating.");
    }
    public void drink() {
        System.out.println(name + " is drinking *burp*.");
    }
}

//OVERLOADED CONSTRUCTOR
public class Main {
	public static void main(String[] args) {
		Pizza pizza = new Pizza("thicc crust","tomato","mozzerella","pepperoni");
		
		System.out.println("Here are the ingredients of your pizza: ");
		System.out.println(pizza.bread);
		System.out.println(pizza.sauce);
		System.out.println(pizza.cheese);
		System.out.println(pizza.topping);
	}
}
class Pizza {
	String bread;
	String sauce;
	String cheese;
	String topping;
	Pizza(){
	}
	Pizza(String bread){
		this.bread = bread;
	}
	Pizza(String bread,String sauce){
		this.bread = bread;
		this.sauce = sauce;
	}
	Pizza(String bread,String sauce,String cheese){
		this.bread = bread;
		this.sauce = sauce;
		this.cheese = cheese;
	}
	Pizza(String bread,String sauce,String cheese,String topping){
		this.bread = bread;
		this.sauce = sauce;
		this.cheese = cheese;
		this.topping = topping;
	}
}

//ARMSTRONG NUMBER
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
    int n,sum=0;
    System.out.println("Enter: ");
    n=sc.nextInt();
    int temp=n;
    while(n>0){
    int r=n%10;
    n=n/10;
    sum=sum+(r*r*r);
    }
    if(temp==sum){
        System.out.println("Armstrong");
    }else{
        System.out.println("NO");
    }
    }
}

/PALINDROME NUMBER
import java.util.*;
class HelloWorld {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
    int n,sum=0;
    System.out.println("Enter: ");
    n=sc.nextInt();
    int temp=n;
    while(n>0){
    int r=n%10;
    n=n/10;
    sum=sum*10+r;
    }
    if(temp==sum){
        System.out.println("PALINDROME");
    }else{
        System.out.println("NO");
    }
    }
